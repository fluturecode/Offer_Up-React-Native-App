{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/lizeidelson/Desktop/elizabeth/myApps/ReactNative-DemoApp/App.js\";\nimport React, { useEffect } from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport Screen from \"./app/components/Screen\";\nimport Button from \"react-native-web/dist/exports/Button\";\nexport default function App() {\n  var requestPermission = function requestPermission() {\n    var _await$ImagePicker$re, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            _await$ImagePicker$re = _context.sent;\n            granted = _await$ImagePicker$re.granted;\n            if (!granted) alert(\"You need to enable permissions to access.\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 3:\n            result = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error reading image\", _context2.t0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  return React.createElement(Screen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }\n  }, React.createElement(Button, {\n    title: \"Select Image\",\n    onPress: selectImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/lizeidelson/Desktop/elizabeth/myApps/ReactNative-DemoApp/App.js"],"names":["React","useEffect","ImagePicker","Permissions","Screen","App","requestPermission","requestCameraRollPermissionsAsync","granted","alert","selectImage","launchImageLibraryAsync","result","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,MAAP;;AAGA,eAAe,SAASC,GAAT,GAAe;AAC7B,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACCJ,WAAW,CAACK,iCAAZ,EADD;;AAAA;AAAA;AACjBC,YAAAA,OADiB,yBACjBA,OADiB;AAEzB,gBAAI,CAACA,OAAL,EAAcC,KAAK,CAAC,2CAAD,CAAL;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAKAR,EAAAA,SAAS,CAAC,YAAM;AACfK,IAAAA,iBAAiB;AACjB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMI,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGR,WAAW,CAACS,uBAAZ,EAFH;;AAAA;AAEZC,YAAAA,MAFY;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIlBC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AAJkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAQA,SACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA6B,IAAA,OAAO,EAAEJ,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAKA","sourcesContent":["import React, { useEffect } from \"react\"\nimport * as ImagePicker from \"expo-image-picker\"\nimport * as Permissions from \"expo-permissions\"\nimport Screen from \"./app/components/Screen\"\nimport { Button } from \"react-native\"\n\nexport default function App() {\n\tconst requestPermission = async () => {\n\t\tconst { granted } = await ImagePicker.requestCameraRollPermissionsAsync()\n\t\tif (!granted) alert(\"You need to enable permissions to access.\")\n\t}\n\n\tuseEffect(() => {\n\t\trequestPermission()\n\t}, [])\n\n\tconst selectImage = async () => {\n\t\ttry {\n\t\t\tconst result = await ImagePicker.launchImageLibraryAsync()\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error reading image\", error)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Screen>\n\t\t\t<Button title='Select Image' onPress={selectImage} />\n\t\t</Screen>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}